//
//  BookListViewController.swift
//  jinyAssessment
//
//  Created by Jothi on 23/07/19.
//  Copyright (c) 2019 Widas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BookListDisplayLogic: class
{
    func showBookList(viewModel:[BookDetailsEntity])
    func showFailureData()
}

class BookListViewController: UIViewController, BookListDisplayLogic,UITableViewDelegate,UITableViewDataSource,UISearchBarDelegate,UISearchDisplayDelegate
{
    var interactor: BookListBusinessLogic?
    var router: (NSObjectProtocol & BookListRoutingLogic & BookListDataPassing)?
    
    // MARK: Object lifecycle
    fileprivate var bookDetails : [BookDetailsEntity] = []
    fileprivate var filteredBookDetails : [BookDetailsEntity] = []
    var titleStr: String = ""
    var queryStr: String = ""
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = BookListInteractor()
        let presenter = BookListPresenter()
        let router = BookListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        searchBar.delegate = self
        titleLbl.text = queryStr
        //registerViewCells()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var titleLbl: UILabel!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var bookListTbl: UITableView!
    @IBOutlet weak var NoInfoLbl: UILabel!
    
    
    // MARK: View lifecycle
    
    
    override func viewWillAppear(_ animated: Bool) {
        self.fetchBookDetails()
    }
    
    // MARK: Fetch book details
    
    func fetchBookDetails()
    {
        self.interactor?.fetchBookDataBy(type: titleStr, query: queryStr)
    }
    
    // MARK: Show Book List
    
    func showBookList(viewModel: [BookDetailsEntity]) {
        NoInfoLbl.isHidden = true
        self.bookDetails = viewModel
        self.filteredBookDetails = viewModel
        self.bookListTbl.reloadData()
    }
    
    // MARK: Failure Data
    
    func showFailureData() {
        NoInfoLbl.isHidden = false
    }
    
    // MARK: - Search Bar Delegate methods
    
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        searchBar.text = ""
        self.filteredBookDetails = self.bookDetails
        self.bookListTbl.reloadData()
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        self.searchByString(searchText)
    }
    
    func searchByString(_ searchString : String)
    {
        if searchString.isEmpty{
            self.filteredBookDetails = self.bookDetails
        }
        else{
            filteredBookDetails = bookDetails.filter({ c in
                if c.book_title == nil {
                    if c.book_title.lowercased().contains(searchString.lowercased()) {
                        return true
                    }else {
                        return false
                    }
                }else {
                    if c.book_title.lowercased().contains(searchString.lowercased()) || (c.book_title.lowercased().contains(searchString.lowercased())) {
                        return true
                    }else {
                        return false
                    }
                }
                
            })
        }
        
        if(filteredBookDetails.count > 0)
        {
            NoInfoLbl.isHidden = true
            bookListTbl.isHidden = false
        }else{
            NoInfoLbl.isHidden = false
            bookListTbl.isHidden = true
        }
        bookListTbl.reloadData()
    }
    
    
    // MARK: Table delegate methods
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.filteredBookDetails.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = bookListTbl.dequeueReusableCell(withIdentifier: "DetailListTableViewCell", for: indexPath) as! DetailListTableViewCell
        let bookDetail = self.filteredBookDetails[indexPath.row]
        cell.titleLbl.text  = bookDetail.book_title
        cell.authorLbl.text = bookDetail.author_name
        cell.genreLbl.text  = bookDetail.genre
        cell.bookCoverImg.cacheImage(urlString: bookDetail.image_url)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routerToBookDetailPage(bookId: self.filteredBookDetails[indexPath.row].id)
    }
    
    // MARK: Pop to viewController
    
    @IBAction func backButtonClicked(_ sender: UIButton) {
        _ = self.navigationController?.popViewController(animated: true)
    }
}
