//
//  HomeViewController.swift
//  jinyAssessment
//
//  Created by Jothi on 23/07/19.
//  Copyright (c) 2019 Widas. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD
import PopupDialog

import PopupDialog

protocol HomeDisplayLogic: class
{
    func showBooksListSuccess(viewModel:Home.BookLists.Response)
    func showBookListFailure()
}

class HomeViewController: UIViewController, HomeDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    
    
    
    
    
    // MARk: Outlets
    
    @IBOutlet weak var titleLbl: UILabel!
    @IBOutlet weak var bookListTbl: UITableView!
    @IBOutlet weak var filterBtn: UIButton!
    @IBOutlet weak var refreshBtn: UIButton!
    @IBOutlet weak var bookLibBtn: UIButton!
    
    
    // MARK: Var and Let
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    fileprivate var bookList : [BookDetailsEntity] = []
    fileprivate var filteredList : [String] = []
    fileprivate var selectedFilter: String = ""
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.hideUI(isHisdden: false)
    }
    
    
    // MARK: Refresh Data
    
    @IBAction func BookOrRefreshButtonClicked(_ sender: UIButton) {
        BookDetailsDBRepo().deleteAllData()
        Loader.ShowLoaderInView(self.view, using: nil
            , callback: { (hud) in
        })
        selectedFilter = ""
        self.bookListTbl.isHidden = true
        self.interactor?.fetchAllBookList()
    }
    
    
    
    
    // MARK: Show Book list
    
    func showBooksListSuccess(viewModel:Home.BookLists.Response) {
        // success response
        Loader.HideLoader(self.view)
        self.bookListTbl.isHidden = false
        self.bookList = viewModel.bookList!
        self.filterBy("")
        self.hideUI(isHisdden: true)
    }
    
    func showBookListFailure() {
        // Failure Response
        Loader.HideLoader(self.view)
        self.hideUI(isHisdden: false)
    }
    
    // MARK: Filter Data from book list
    
    @IBAction func filterButtonClicked(_ sender: UIButton) {
        DispatchQueue.main.async {
            
            var filterDropDown: [DropDownEntity] = []
            filterDropDown = FilterType.allValues.map({ (fT) in
                let dropDownItem = DropDownEntity()
                dropDownItem.name = fT.rawValue.capitalized
                dropDownItem.stringID = fT.rawValue
                return dropDownItem
            })
            
            let dropDown = DropDownList(nibName: "DropDownList", bundle: nil)
            dropDown.selectedItemId = self.selectedFilter
            dropDown.delegateCtrl   = self
            dropDown.titleText      = "Filter Options"
            dropDown.ItemList       = filterDropDown
            
            let popup = PopupDialog(viewController: dropDown, buttonAlignment: .horizontal, transitionStyle: .bounceDown, tapGestureDismissal: true)
            dropDown.navController = self.navigationController
            self.present(popup, animated: true, completion: nil)
            
            dropDown.selectedObject = { obj in
                self.selectedFilter = obj.stringID ?? ""
                BookDetailsDBRepo().fetchBookList("", query: "", deletedBook: false, callback: { (bookList) in
                    self.bookList = bookList
                    self.filterBy(self.selectedFilter)
                })
                popup.dismiss(nil)
            }
        }
    }
    
    
    // MARK: Filter Data
    
    private func filterBy(_ key:String)
    {
        switch key {
        case FilterType.country.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.author_country })))
            break
        case FilterType.author.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.author_name })))
            break
        case FilterType.genre.rawValue:
            self.filteredList = Array(Set(self.bookList.map({ $0.genre })))
            break
        default:
            self.filteredList = Array(Set(self.bookList.map({ $0.book_title })))
            break
        }
        self.filteredList = self.filteredList.sorted(by: <)
        self.bookListTbl.reloadData()
    }
    
    
    // MARK: Hide UI
    private func hideUI(isHisdden:Bool)
    {
        self.bookListTbl.isHidden = isHisdden ? false : true
        self.bookLibBtn.isHidden = isHisdden ? true  : false
        self.filterBtn.isHidden  = isHisdden ? false : true
        self.refreshBtn.isHidden = isHisdden ? false : true
    }
    
    
    // MARK: Table delegate methods
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.filteredList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "ListTableViewCell", for: indexPath) as! ListTableViewCell
        cell.titleLabel.text = filteredList[indexPath.row]
        cell.favImg.image = UIImage(named: "")
        BookDetailsDBRepo().fetchBookList(self.selectedFilter, query: self.filteredList[indexPath.row], deletedBook: false, callback: { (books) in
            switch self.selectedFilter {
            case FilterType.country.rawValue:
                for bookKey in books{
                    if bookKey.author_country == self.filteredList[indexPath.row]{
                        if bookKey.favouriteBook == true{
                            cell.favImg.image = UIImage(named: "fav")
                        }
                    }
                }
                break
            case FilterType.author.rawValue:
                for bookKey in books{
                    if bookKey.author_name == self.filteredList[indexPath.row]{
                        if bookKey.favouriteBook == true{
                            cell.favImg.image = UIImage(named: "fav")
                        }
                    }
                }
                break
            case FilterType.genre.rawValue:
                for bookKey in books{
                    if bookKey.genre == self.filteredList[indexPath.row]{
                        if bookKey.favouriteBook == true{
                            cell.favImg.image = UIImage(named: "fav")
                        }
                    }
                }
                break
            default:
                for bookKey in books{
                    if bookKey.book_title == self.filteredList[indexPath.row]{
                        if bookKey.favouriteBook == true{
                            cell.favImg.image = UIImage(named: "fav")
                        }
                    }
                }
                break
            }
        })
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routerToBookList(title: self.selectedFilter, queryStr: filteredList[indexPath.row])
    }
    
    func tableView(_ tableView: UITableView,
                   leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
    {
        let closeAction = UIContextualAction(style: .normal, title:  "Delete", handler: { (ac:UIContextualAction, view:UIView, success:(Bool) -> Void) in
            success(true)
            //delete DB
            BookDetailsDBRepo().updateBookList(self.selectedFilter,query: self.filteredList[indexPath.row], deletedBook: true, favorite: false)
            
            self.filteredList.remove(at: indexPath.row)
            tableView.reloadData()
        })
        //closeAction.image = UIImage(named: "tick")
        closeAction.backgroundColor = .red
        
        return UISwipeActionsConfiguration(actions: [closeAction])
        
    }
    
    func tableView(_ tableView: UITableView,
                   trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
    {
        let modifyAction = UIContextualAction(style: .normal, title:  "Favorite", handler: { (ac:UIContextualAction, view:UIView, success:(Bool) -> Void) in
            //update DB
            BookDetailsDBRepo().updateBookList(self.selectedFilter,query: self.filteredList[indexPath.row],deletedBook: false, favorite: true)
            tableView.reloadData()
            success(true)
        })
        //        modifyAction.image = UIImage(named: "hammer")
        modifyAction.backgroundColor = .blue
        return UISwipeActionsConfiguration(actions: [modifyAction])
    }
    
}
